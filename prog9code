PROGRAM-9 ( LSTM and compare it's performance on a sequential task )


import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, LSTM, Dense
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt

def create_sequence(n_timesteps):
    X = np.array([[i+j for j in range(n_timesteps)] for i in range(100)])
    y = np.array([i+n_timesteps for i in range(100)])
    return X, y

n_timesteps = 10
X, y = create_sequence(n_timesteps)

X = X.reshape((X.shape[0], X.shape[1], 1))

rnn_model = Sequential()
rnn_model.add(SimpleRNN(50, activation='relu', input_shape=(n_timesteps, 1)))
rnn_model.add(Dense(1))
rnn_model.compile(optimizer=Adam(learning_rate=0.01), loss='mse')

rnn_history = rnn_model.fit(X, y, epochs=200, verbose=1)

lstm_model = Sequential()
lstm_model.add(LSTM(50, activation='relu', input_shape=(n_timesteps, 1)))
lstm_model.add(Dense(1))
lstm_model.compile(optimizer=Adam(learning_rate=0.01), loss='mse')

lstm_history = lstm_model.fit(X, y, epochs=200, verbose=1)

plt.plot(rnn_history.history['loss'], label='SimpleRNN')
plt.plot(lstm_history.history['loss'], label='LSTM')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

X_test, y_test = create_sequence(n_timesteps)
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

y_pred_rnn = rnn_model.predict(X_test, verbose=0)
y_pred_lstm = lstm_model.predict(X_test, verbose=0)

print("SimpleRNN Predictions:")
for i in range(10):
    print(f"Expected: {y_test[i]}, Predicted: {y_pred_rnn[i][0]}")

print("\nLSTM Predictions:")
for i in range(10):
    print(f"Expected: {y_test[i]}, Predicted: {y_pred_lstm[i][0]}")
