PROGRAM-8 ( Basic RNN for Sequence prediction )


import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
from tensorflow.keras.optimizers import Adam

def create_sequence(n_timesteps):
    X = np.array([[i+j for j in range(n_timesteps)] for i in range(100)])
    y = np.array([i+n_timesteps for i in range(100)])
    return X, y

n_timesteps = 10
X, y = create_sequence(n_timesteps)

# Reshape data to fit RNN input requirements
X = X.reshape((X.shape[0], X.shape[1], 1))

# Define the RNN model
model = Sequential()
model.add(SimpleRNN(50, activation='relu', input_shape=(n_timesteps, 1)))
model.add(Dense(1))
model.compile(optimizer=Adam(learning_rate=0.01), loss='mse')

# Train the model
model.fit(X, y, epochs=200, verbose=1)

# Generate a new sequence for testing
X_test, y_test = create_sequence(n_timesteps)
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

# Predict the next values in the sequence
y_pred = model.predict(X_test, verbose=0)

# Compare predictions with actual values
for i in range(10):
    print(f"Expected: {y_test[i]}, Predicted: {y_pred[i][0]}")
